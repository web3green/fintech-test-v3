
import { Button } from '@/components/ui/button';
import { Globe } from 'lucide-react';
import { useLanguage } from '@/contexts/LanguageContext';
import { useEffect, useState } from 'react';

export function LanguageToggle() {
  const { language, setLanguage } = useLanguage();
  const [animating, setAnimating] = useState(false);
  
  // –ë–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–π –º–µ—Ö–∞–Ω–∏–∑–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —è–∑—ã–∫–∞
  const toggleLanguage = () => {
    if (animating) return; // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –¥–≤–æ–π–Ω—ã–µ –∫–ª–∏–∫–∏
    
    setAnimating(true);
    
    const newLanguage = language === 'en' ? 'ru' : 'en';
    console.log(`üåç –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —è–∑—ã–∫–∞: ${language} -> ${newLanguage}`);
    
    // –°–Ω–∞—á–∞–ª–∞ –æ–±–Ω–æ–≤–∏–º localStorage –Ω–∞–ø—Ä—è–º—É—é –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    try {
      localStorage.setItem('language', newLanguage);
    } catch (e) {
      console.warn('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —è–∑—ã–∫–∞ –≤ localStorage:', e);
    }
    
    // –ó–∞—Ç–µ–º –≤—ã–∑–æ–≤–µ–º setLanguage –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    setLanguage(newLanguage);
    
    // –î–æ–±–∞–≤–∏–º —Ç–∞–∫–∂–µ –∞—Ç—Ä–∏–±—É—Ç—ã –∫ HTML –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏ —Å—Ç–∏–ª–µ–π
    document.documentElement.setAttribute('lang', newLanguage);
    document.documentElement.setAttribute('data-language', newLanguage);
    
    // –í—ã–∑–æ–≤–µ–º —Å–æ–±—ã—Ç–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    window.dispatchEvent(new CustomEvent('language:changed', { detail: { language: newLanguage } }));
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π
    document.documentElement.style.opacity = '0.99';
    setTimeout(() => {
      document.documentElement.style.opacity = '1';
      setAnimating(false);
    }, 100);
  };
  
  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å localStorage –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    try {
      const storedLang = localStorage.getItem('language');
      if (storedLang && storedLang !== language && (storedLang === 'en' || storedLang === 'ru')) {
        console.log(`üåç LanguageToggle: –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —è–∑—ã–∫–∞. Storage: ${storedLang}, Context: ${language}`);
        setLanguage(storedLang as 'en' | 'ru');
      }
    } catch (e) {
      console.warn('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —è–∑—ã–∫–∞ –∏–∑ localStorage:', e);
    }
  }, []);
  
  return (
    <Button 
      variant="ghost" 
      size="sm" 
      onClick={toggleLanguage}
      disabled={animating}
      className="flex items-center gap-2 transition-all duration-300"
      data-language={language}
    >
      <Globe className="w-4 h-4" />
      <span className="text-sm font-medium">
        {language === 'en' ? 'EN' : 'RU'}
      </span>
      
      {/* –°–∫—Ä—ã—Ç—ã–π —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è */}
      <span className="language-update-trigger" key={`lang-trigger-${Date.now()}`}></span>
    </Button>
  );
}
