
import { Button } from '@/components/ui/button';
import { Globe } from 'lucide-react';
import { useLanguage } from '@/contexts/LanguageContext';
import { useEffect, useState } from 'react';
import { toast } from '@/components/ui/use-toast';

export function LanguageToggle() {
  const { language, setLanguage } = useLanguage();
  const [animating, setAnimating] = useState(false);
  
  // –£—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω–Ω—ã–π –º–µ—Ö–∞–Ω–∏–∑–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —è–∑—ã–∫–∞
  const toggleLanguage = () => {
    if (animating) return; // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –¥–≤–æ–π–Ω—ã–µ –∫–ª–∏–∫–∏
    
    setAnimating(true);
    
    const newLanguage = language === 'en' ? 'ru' : 'en';
    console.log(`üåç –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —è–∑—ã–∫–∞: ${language} -> ${newLanguage}`);
    
    // –°–Ω–∞—á–∞–ª–∞ –æ–±–Ω–æ–≤–∏–º localStorage –Ω–∞–ø—Ä—è–º—É—é –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    try {
      localStorage.setItem('language', newLanguage);
      // –¢–∞–∫–∂–µ –¥–æ–±–∞–≤–∏–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–≥—Ä—É–∑–∫–µ
      localStorage.setItem('language_updated', Date.now().toString());
    } catch (e) {
      console.warn('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —è–∑—ã–∫–∞ –≤ localStorage:', e);
    }
    
    // –ó–∞—Ç–µ–º –≤—ã–∑–æ–≤–µ–º setLanguage –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    setLanguage(newLanguage);
    
    // –î–æ–±–∞–≤–∏–º —Ç–∞–∫–∂–µ –∞—Ç—Ä–∏–±—É—Ç—ã –∫ HTML –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏ —Å—Ç–∏–ª–µ–π
    document.documentElement.setAttribute('lang', newLanguage);
    document.documentElement.setAttribute('data-language', newLanguage);
    
    // –í—ã–∑–æ–≤–µ–º —Å–æ–±—ã—Ç–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    window.dispatchEvent(new CustomEvent('language:changed', { 
      detail: { language: newLanguage, timestamp: Date.now() } 
    }));
    
    // –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ —Å—Ç–∏–ª–µ–π
    document.querySelectorAll('link[rel="stylesheet"]').forEach(linkEl => {
      if (linkEl instanceof HTMLLinkElement && linkEl.href) {
        const url = new URL(linkEl.href);
        url.searchParams.set('_lang', `${newLanguage}_${Date.now()}`);
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å—Ç–∏–ª—è –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
        const newLink = document.createElement('link');
        newLink.rel = 'stylesheet';
        newLink.href = url.toString();
        newLink.onload = () => {
          try {
            // –ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤–æ–≥–æ —Å—Ç–∏–ª—è —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π
            linkEl.remove();
          } catch (e) {
            console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–π —Å—Ç–∏–ª—å:', e);
          }
        };
        document.head.appendChild(newLink);
      }
    });
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ–±–æ–ª—å—à–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–º–µ–Ω–µ —è–∑—ã–∫–∞
    toast({
      title: newLanguage === 'ru' ? "–Ø–∑—ã–∫ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ –†—É—Å—Å–∫–∏–π" : "Language changed to English",
      duration: 2000,
    });
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π –∏ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    document.documentElement.style.opacity = '0.99';
    setTimeout(() => {
      document.documentElement.style.opacity = '1';
      
      // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å—Ç–∏–ª—å –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      const forceStyle = document.createElement('style');
      forceStyle.textContent = `
        [data-language="${newLanguage}"] * {
          animation: lang-update 1ms;
        }
        @keyframes lang-update {
          from { opacity: 0.99; }
          to { opacity: 1; }
        }
      `;
      document.head.appendChild(forceStyle);
      
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å –∞—Ç—Ä–∏–±—É—Ç–æ–º data-language
      document.querySelectorAll('[data-language]').forEach(el => {
        el.setAttribute('data-language-change', Date.now().toString());
      });
      
      // –†–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è–µ–º —Å–æ–±—ã—Ç–∏–µ —Å–º–µ–Ω—ã —è–∑—ã–∫–∞ –≥–ª—É–±–∂–µ –≤ DOM
      document.querySelectorAll('.force-update-on-language-change').forEach(el => {
        // –°–æ–∑–¥–∞–¥–∏–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π DOM-—ç–ª–µ–º–µ–Ω—Ç –¥–ª—è —Ç—Ä–∏–≥–≥–µ—Ä–∞ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∏
        const trigger = document.createElement('span');
        trigger.className = 'language-update-trigger';
        trigger.style.display = 'none';
        trigger.dataset.timestamp = Date.now().toString();
        
        // –î–æ–±–∞–≤–∏–º –∏ –∑–∞—Ç–µ–º —É–¥–∞–ª–∏–º –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä–∞
        el.appendChild(trigger);
        setTimeout(() => trigger.remove(), 100);
        
        // –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–∏–º –ª—é–±—ã–µ –∫–ª—é—á–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –µ—Å–ª–∏ –µ—Å—Ç—å
        if (el.hasAttribute('key')) {
          el.setAttribute('key', `${el.getAttribute('key')}-${Date.now()}`);
        }
      });
      
      // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å—Ç–∏–ª—å —á–µ—Ä–µ–∑ —Å–µ–∫—É–Ω–¥—É
      setTimeout(() => {
        forceStyle.remove();
        setAnimating(false);
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        if (document.documentElement.getAttribute('lang') !== newLanguage) {
          console.warn('–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —è–∑—ã–∫–æ–≤ –ø–æ—Å–ª–µ –∞–Ω–∏–º–∞—Ü–∏–∏, –∏—Å–ø—Ä–∞–≤–ª—è–µ–º...');
          document.documentElement.setAttribute('lang', newLanguage);
          document.documentElement.setAttribute('data-language', newLanguage);
        }
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –æ–±—Ö–æ–¥ DOM –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–µ–∞–∫—Ç—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        document.querySelectorAll('[data-i18n]').forEach(el => {
          el.setAttribute('data-i18n-updated', Date.now().toString());
        });
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª—é–±—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤,
        // –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Å–ª—É—à–∞—Ç—å –µ–≥–æ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–≤–æ–µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
        window.dispatchEvent(new Event('forceRender'));
        
      }, 1000);
    }, 100);
  };
  
  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å localStorage –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏ —Ñ–æ–∫—É—Å–µ –æ–∫–Ω–∞
  useEffect(() => {
    const syncLanguage = () => {
      try {
        const storedLang = localStorage.getItem('language');
        if (storedLang && storedLang !== language && (storedLang === 'en' || storedLang === 'ru')) {
          console.log(`üåç LanguageToggle: –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —è–∑—ã–∫–∞. Storage: ${storedLang}, Context: ${language}`);
          setLanguage(storedLang as 'en' | 'ru');
          
          // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ HTML —Ç–∞–∫–∂–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã
          if (document.documentElement.getAttribute('lang') !== storedLang) {
            document.documentElement.setAttribute('lang', storedLang);
            document.documentElement.setAttribute('data-language', storedLang);
          }
        }
      } catch (e) {
        console.warn('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —è–∑—ã–∫–∞ –∏–∑ localStorage:', e);
      }
    };

    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    syncLanguage();
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–∏ —Ñ–æ–∫—É—Å–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
    const handleVisibilityChange = () => {
      if (document.visibilityState === 'visible') {
        console.log('–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å—Ç–∞–ª–∞ –≤–∏–¥–∏–º–æ–π - –ø—Ä–æ–≤–µ—Ä—è–µ–º —è–∑—ã–∫');
        syncLanguage();
      }
    };
    
    document.addEventListener('visibilitychange', handleVisibilityChange);
    
    // –¢–∞–∫–∂–µ –¥–æ–±–∞–≤–∏–º –ø—Ä–æ–≤–µ—Ä–∫—É —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    // –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
    const timeoutId = setTimeout(syncLanguage, 2000);
    
    return () => {
      document.removeEventListener('visibilitychange', handleVisibilityChange);
      clearTimeout(timeoutId);
    };
  }, [language, setLanguage]);
  
  return (
    <Button 
      variant="ghost" 
      size="sm" 
      onClick={toggleLanguage}
      disabled={animating}
      className="flex items-center gap-2 transition-all duration-300"
      data-language={language}
      aria-label={language === 'en' ? "Switch to Russian" : "–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π"}
    >
      <Globe className="w-4 h-4" />
      <span className="text-sm font-medium">
        {language === 'en' ? 'EN' : 'RU'}
      </span>
      
      {/* –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª—é—á –Ω–∞ –æ—Å–Ω–æ–≤–µ timestamp –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è */}
      <span className="language-update-trigger sr-only" key={`lang-trigger-${Date.now()}`}>
        {language}
      </span>
    </Button>
  );
}
