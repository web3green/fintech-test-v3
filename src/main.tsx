import { createRoot } from 'react-dom/client'
import App from './App.tsx'
import './index.css'
import { 
  updateSocialMetaTags, 
  enforceOurFavicon 
} from './utils/metaTagManager'

// Ensure we have a stable root element
const rootElement = document.getElementById("root");

if (!rootElement) {
  throw new Error("Root element not found. Make sure there is a div with id 'root' in your HTML.");
}

// Use a single root instance to prevent the "container has already been passed to createRoot()" error
const root = createRoot(rootElement);

// –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞—Ç–µ–≥–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
const addNoCacheMetaTags = () => {
  const metaTags = [
    { httpEquiv: 'Cache-Control', content: 'no-cache, no-store, must-revalidate, max-age=0' },
    { httpEquiv: 'Pragma', content: 'no-cache' },
    { httpEquiv: 'Expires', content: '0' },
    // –î–æ–±–∞–≤–ª—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≤–µ—Ä—Å–∏–∏ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–±—Ä–æ—Å–∞ –∫–µ—à–∞
    { name: 'app-version', content: `${Date.now()}` }
  ];

  metaTags.forEach(meta => {
    // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–µ–≥–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    const existingTag = document.querySelector(`meta[${meta.httpEquiv ? 'http-equiv' : 'name'}="${meta.httpEquiv || meta.name}"]`);
    if (existingTag) existingTag.remove();
    
    // –°–æ–∑–¥–∞–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ç–µ–≥
    const metaTag = document.createElement('meta');
    if (meta.httpEquiv) metaTag.httpEquiv = meta.httpEquiv;
    if (meta.name) metaTag.name = meta.name;
    metaTag.content = meta.content;
    document.head.appendChild(metaTag);
  });
  
  console.log('üö´ –î–æ–±–∞–≤–ª–µ–Ω—ã –º–µ—Ç–∞—Ç–µ–≥–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è');
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞
const forceCacheRefresh = () => {
  console.log('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞:', new Date().toISOString());
  
  // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞—Ç–µ–≥–∏ –ø—Ä–æ—Ç–∏–≤ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
  addNoCacheMetaTags();
  
  // –î–æ–±–∞–≤–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –∫ URL –≤—Å–µ—Ö CSS —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Å–±—Ä–æ—Å–∞ –∫—ç—à–∞
  document.querySelectorAll('link[rel="stylesheet"]').forEach(linkEl => {
    if (linkEl instanceof HTMLLinkElement && linkEl.href) {
      const url = new URL(linkEl.href);
      url.searchParams.set('_cache', Date.now().toString());
      linkEl.href = url.toString();
      console.log('üìë –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ CSS:', url.toString());
    }
  });
  
  // –¢–æ –∂–µ —Å–∞–º–æ–µ –¥–ª—è —Å–∫—Ä–∏–ø—Ç–æ–≤
  document.querySelectorAll('script[src]').forEach(scriptEl => {
    if (scriptEl instanceof HTMLScriptElement && scriptEl.src && !scriptEl.src.includes('gptengineer')) {
      const originalSrc = scriptEl.src;
      const url = new URL(originalSrc);
      url.searchParams.set('_cache', Date.now().toString());
      
      // –î–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤ –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –∏—Ö –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
      if (!originalSrc.includes('inline') && !originalSrc.includes('dynamic')) {
        const parent = scriptEl.parentNode;
        if (parent) {
          const newScript = document.createElement('script');
          newScript.src = url.toString();
          newScript.type = scriptEl.type;
          newScript.async = scriptEl.async;
          newScript.defer = scriptEl.defer;
          parent.replaceChild(newScript, scriptEl);
          console.log('üìú –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Script:', url.toString());
        }
      }
    }
  });
  
  // –ù–∞–º–µ–∫–Ω—É—Ç—å –±—Ä–∞—É–∑–µ—Ä—É –æ–±–Ω–æ–≤–∏—Ç—å –≤—Å–µ —Ä–µ—Å—É—Ä—Å—ã
  if (window.performance && window.performance.getEntriesByType) {
    try {
      const resources = window.performance.getEntriesByType('resource');
      resources.forEach(resource => {
        if (resource.name && !resource.name.includes('gptengineer')) {
          const url = new URL(resource.name);
          const isCss = url.pathname.endsWith('.css');
          const isJs = url.pathname.endsWith('.js');
          
          if (isCss || isJs) {
            const cacheBusterUrl = `${url.origin}${url.pathname}?_cache=${Date.now()}${url.search}`;
            
            // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ—Å—É—Ä—Å
            const link = document.createElement('link');
            link.rel = 'prefetch';
            link.href = cacheBusterUrl;
            document.head.appendChild(link);
            console.log('üîç –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ —Ä–µ—Å—É—Ä—Å–∞:', cacheBusterUrl);
            
            // –£–¥–∞–ª–∏—Ç—å —á–µ—Ä–µ–∑ –∫–æ—Ä–æ—Ç–∫—É—é –∑–∞–¥–µ—Ä–∂–∫—É
            setTimeout(() => link.remove(), 1000);
          }
        }
      });
    } catch (e) {
      console.warn('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å resource timing:', e);
    }
  }
  
  // –°–æ–∑–¥–∞—Ç—å –∏ –ø—Ä–∏–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å—Ç–∏–ª—å –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const forceRepaintStyle = document.createElement('style');
  forceRepaintStyle.textContent = 'body { animation: force-repaint 0.1s; } @keyframes force-repaint { from { opacity: 0.99; } to { opacity: 1; } }';
  document.head.appendChild(forceRepaintStyle);
  
  // –£–¥–∞–ª–∏—Ç—å —Å—Ç–∏–ª—å —á–µ—Ä–µ–∑ –∫–æ—Ä–æ—Ç–∫—É—é –∑–∞–¥–µ—Ä–∂–∫—É
  setTimeout(() => forceRepaintStyle.remove(), 300);
  
  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞—Å—Ç–∞–≤–∏—Ç—å –±—Ä–∞—É–∑–µ—Ä –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ä–µ—Å—É—Ä—Å—ã
  if ('serviceWorker' in navigator) {
    navigator.serviceWorker.getRegistrations().then(registrations => {
      registrations.forEach(registration => {
        registration.unregister();
        console.log('üßπ –û—Ç–º–µ–Ω–µ–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è Service Worker');
      });
    });
  }
  
  // –ü–æ–ø—ã—Ç–∫–∞ –æ—á–∏—Å—Ç–∏—Ç—å –∫–µ—à —Å –ø–æ–º–æ—â—å—é Cache API, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ
  if ('caches' in window) {
    caches.keys().then(cacheNames => {
      cacheNames.forEach(cacheName => {
        caches.delete(cacheName);
        console.log('üßπ –£–¥–∞–ª–µ–Ω –∫–µ—à:', cacheName);
      });
    });
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –Ω–∞—à–µ–≥–æ –±—Ä–µ–Ω–¥–∏–Ω–≥–∞
const ensureOurBranding = () => {
  // –ù–∞—á–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
  updateSocialMetaTags();
  
  // –ü—Ä–∏–º–µ–Ω–∏—Ç—å –Ω–∞—à favicon
  enforceOurFavicon();
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –º–µ—Ç–∞-—Ç–µ–≥–∏ –¥–æ –∑–∞–≥—Ä—É–∑–∫–∏ React
document.addEventListener('DOMContentLoaded', () => {
  // –ù–∞—á–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
  ensureOurBranding();
  
  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞
  forceCacheRefresh();
  
  // –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Å –º–µ–Ω—å—à–∏–º–∏ –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏ –∏ –±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
  for (let i = 1; i <= 10; i++) {
    setTimeout(ensureOurBranding, i * 100); // –û–±–Ω–æ–≤–ª—è—Ç—å –∫–∞–∂–¥—ã–µ 100–º—Å –≤ —Ç–µ—á–µ–Ω–∏–µ 1 —Å–µ–∫—É–Ω–¥—ã
  }
  
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –±–æ–ª–µ–µ –¥–ª–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–¥–µ—Ä–∂–µ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–∑–¥–Ω–µ–π –∑–∞–≥—Ä—É–∑–∫–∏
  setTimeout(ensureOurBranding, 2000);
  setTimeout(ensureOurBranding, 5000);
});

// –¢–∞–∫–∂–µ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ—Ç–∞-—Ç–µ–≥–æ–≤ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
window.addEventListener('load', () => {
  console.log('üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
  ensureOurBranding();
  // –û–±–Ω–æ–≤–∏—Ç—å –∫—ç—à –ø–æ—Å–ª–µ –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
  forceCacheRefresh();
  
  // –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∏–ª–∏ –ø–æ—Å–ª–µ –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
  document.querySelectorAll('link[rel="stylesheet"]').forEach(linkEl => {
    if (linkEl instanceof HTMLLinkElement) {
      // –ö–ª–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∏–ª—å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      const newLink = document.createElement('link');
      newLink.rel = 'stylesheet';
      newLink.href = `${linkEl.href}?_t=${Date.now()}`;
      newLink.onload = () => {
        // –ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤–æ–≥–æ —Å—Ç–∏–ª—è —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–π
        linkEl.remove();
        console.log('üé® –°—Ç–∏–ª—å –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω:', newLink.href);
      };
      document.head.appendChild(newLink);
    }
  });
  
  for (let i = 1; i <= 5; i++) {
    setTimeout(ensureOurBranding, i * 200);
  }
});

// –°–æ–∑–¥–∞—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—à–µ–≥–æ –±—Ä–µ–Ω–¥–∏–Ω–≥–∞
setInterval(ensureOurBranding, 5000); // –ü—Ä–æ–≤–µ—Ä—è—Ç—å –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥

// –î–æ–±–∞–≤–∏–º –ø—Ä–æ–≤–µ—Ä–∫—É –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ DOM –∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ –Ω–∏—Ö
const observeDOM = () => {
  const observer = new MutationObserver(mutations => {
    let shouldRefresh = false;
    mutations.forEach(mutation => {
      if (mutation.type === 'childList' && mutation.addedNodes.length > 0) {
        shouldRefresh = true;
      }
    });
    
    if (shouldRefresh) {
      console.log('üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ DOM, –æ–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à');
      ensureOurBranding();
    }
  });
  
  observer.observe(document.body, {
    childList: true,
    subtree: true,
    attributes: true,
    attributeFilter: ['src', 'href', 'style', 'class']
  });
  
  return observer;
};

// –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å –∑–∞ DOM
const domObserver = observeDOM();

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('visibilitychange', () => {
  if (document.visibilityState === 'visible') {
    console.log('‚ö° –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å—Ç–∞–ª–∞ –≤–∏–¥–∏–º–æ–π - –æ–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –∏ –±—Ä–µ–Ω–¥–∏–Ω–≥');
    forceCacheRefresh();
    ensureOurBranding();
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ç–∏
window.addEventListener('online', () => {
  console.log('üåê –°–µ—Ç–µ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ - –æ–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à');
  forceCacheRefresh();
  ensureOurBranding();
});

// –î–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–∏ —Å–º–µ–Ω–µ —è–∑—ã–∫–∞
window.addEventListener('languagechange', () => {
  console.log('üåç –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —è–∑—ã–∫–∞ - –æ–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à');
  forceCacheRefresh();
});

// –°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
const refreshEvent = new CustomEvent('app:refresh');
window.dispatchEvent(refreshEvent);

// Render App only once to avoid duplicate instances
root.render(<App />);

// Add explicit HMR handling for development mode
if (import.meta.hot) {
  try {
    // Correctly configured HMR acceptance for App component
    import.meta.hot.accept('./App.tsx', () => {
      console.log('üîÑ Hot Module Replacement: Updating App component');
      try {
        // Render the updated App component
        root.render(<App />);
      } catch (error) {
        console.error('‚ùå Error during HMR update:', error);
      }
    });
    
    // Accept global HMR
    import.meta.hot.accept();
    
    // Add listener for HMR errors
    import.meta.hot.on('error', (error) => {
      console.error('‚ùå HMR Error:', error);
    });
  } catch (err) {
    console.error('HMR setup failed:', err);
    // Fallback - if HMR fails, refresh the page
    window.location.reload();
  }
}
